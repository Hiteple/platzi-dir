"Validates level types"
enum Level {
	basic
	intermediate
	advanced
}

union GlobalSearch = Course | Student | Monitor

## Schema types ##
type Course {
	_id: ID!
	title: String!
	teacher: String
	description: String!
	topic: String
	people: [Student]
	level: Level
}

interface Person {
	_id: ID!
	name: String!
	email: String!
}

type Student implements Person {
	_id: ID!
	name: String!
	email: String!
	avatar: String
}

type Monitor implements Person {
	_id: ID!
	name: String!
	email: String!
	phone: String
}

#################

# Return Schema
type Query {
	# Returns all courses
	courses: [Course]

	# Returns a single course
	course(_id: ID!): [Course]

	# Returns all students
	students: [Person]

	# Returns a single student
	student(_id: ID!): [Person]

	# Global search with union type
	searchItems(keyword: String!): [GlobalSearch]
}

# Mutations
input CourseInput {
	title: String!
	teacher: String
	description: String!
	topic: String
	level: Level
}

input CourseEditInput {
	title: String
	teacher: String
	description: String
	topic: String
}

input PersonInput {
	name: String!
	email: String!
	phone: String
	avatar: String
}

input PersonEditInput {
	name: String
	email: String
	phone: String
	avatar: String
}

type Mutation {
	# Creates a course
	createCourse(input: CourseInput!): [Course]

	# Edits a course
	editCourse(_id: ID!, input: CourseEditInput!): [Course]

	# Creates a course
	createStudent(input: PersonInput!): [Person]

	# Edits a student
	editStudent(_id: ID!, input: PersonEditInput!): [Person]

	# Deletes a course
	deleteCourse(_id: ID!): [Course]

	# Deletes a student
	deleteStudent(_id: ID!): [Person]

	# Adds a person to a course
	addPeople(courseID: ID!, personID: ID!): Course
}
